#include <pololu/3pi.h>

// Define constants for the PID controller
const float KP = 0.1;
const float KD = 0.01;

// Define the target point
const int TARGET_X = 100;
const int TARGET_Y = 50;

// Define the threshold distance for stopping
const float THRESHOLD_DIST = 5.0;

// Initialize variables for PID controller
float last_error = 0;
float integral = 0;

// Function to calculate the distance between two points
float distance(float x1, float y1, float x2, float y2) {
  float dx = x2 - x1;
  float dy = y2 - y1;
  return sqrt(dx*dx + dy*dy);
}

int main() {
  // Initialize motors
  pololu_3pi_init(2000);

  // Define variables for current position and orientation
  float current_x = 0;
  float current_y = 0;
  float current_angle = 0;

  while (1) {
    // Determine the rotation of the wheels
    int left_count = get_counts_left();
    int right_count = get_counts_right();
    float delta_left = (float)left_count / 16.0;
    float delta_right = (float)right_count / 16.0;
    clear(); // clear the counts

    // Calculate the change in position and orientation
    float delta_dist = (delta_left + delta_right) / 2.0;
    current_x += delta_dist * cos(current_angle);
    current_y += delta_dist * sin(current_angle);
    current_angle += (delta_right - delta_left) / 3.25;

    // Calculate distance and angle to target point
    float dist = distance(current_x, current_y, TARGET_X, TARGET_Y);
    float ang = atan2(TARGET_Y - current_y, TARGET_X - current_x) - current_angle;

    // Use PID controller to move towards target point
    float error = ang;
    integral += error;
    float derivative = error - last_error;
    last_error = error;
    float turn = KP * error + KD * derivative + 0.1 * integral;

    // Stop when target is reached
    if (dist < THRESHOLD_DIST) {
      set_motors(0, 0);
      delay_ms(1000);
      return 0;
    }

    // Move the robot based on the PID controller output
    set_motors(50 + turn, 50 - turn);
  }
}
